with Ada.Text_IO; use Ada.Text_IO;

package body LibComplexLists is
begin
   procedure read(Db: in out List; File: File_type) is
      C, D: Char;
      Infile, outfile: File_Type;
      Db: List;
      StudName: Name;
      Id: IdNumber;
   begin
      Db := new Element'("aaaaaaaaaaaaaaa", 000, null, null, null, null, null, null);
	  db := new Element'("zzzzzzzzzzzzzzz", 999, null, null, null, null, db, null);
	  db.start.end := db;
      Open(infile, In_File, "file.txt");
      Open(Outfile, Out_File, "outfile.txt");
      while not End_Of_File loop
         Get(File, C);
         case C
            when 'p' | 'P' =>
              Get(File, d);
              Print(d, Db);
            when 'a' | 'A' =>
              Get(File, Stud);
              Get(File, Id);
              Insert(Stud, Id, Db);
            when 'd' | 'D' =>
              Get(File, D);
              Get(File, Stud);
         end case;
      end loop;
      Close(Infile);
      Close(Outfile);
   end Read;

   procedure Insert(studName: in Name; Id: in IdNumber; Db: in out List) is
   		pointer: complexList;
		idPointer: complexList;
	begin
      	pointer := stud;
	  	while pointer != null loop
			if pointer.studName'val(1) > stud.studName'val(1) and pointer.next.studName'Val(1) < stud.studName'val(1) then
				e := new element'(stud.studName, stud.studId, pointer.previousName, pointer.nextName, pointer.previousId, pointer.nextId);
			else
				pointer := pointer.nextName;
			end if;
		end loop;
		while idPointer != null loop
			if idPointer.id > stud.id and idPointer.nextId.id < stud.id then
				e.id := stud.id;
			else
				idPointer := idPointer.nextId;
			end if; 
		end loop;
	end insert;
	procedure delete(db: in out complexList; id: integer; studName: name) is
		pointer: complexList;
	begin
		pointer := db;
		if id != 000 then
			while pointer != null loop
				if id = pointer.id then
					
